{"version":3,"sources":["pages/Home/styles.ts","pages/Home/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["box","marginTop","display","flexDirection","alignItems","boxTitle","marginBottom","namesInputTitle","fontSize","namesInput","checkboxTitle","dateInput","width","margin","submit","customTitleInput","listItem","HomePage","useState","names","setNames","isDefault","setIsDefault","value","setValue","startDate","setStartDate","endDate","setEndDate","title","message","allDescriptives","setAllDescriptives","customTitle","setCustomTitle","customText","setCustomText","Container","component","maxWidth","style","styles","Typography","variant","Grid","container","spacing","item","xs","TextField","autoComplete","name","required","fullWidth","id","label","autoFocus","placeholder","onChange","event","target","type","defaultValue","InputLabelProps","shrink","FormControlLabel","control","Checkbox","checked","multiline","rows","Button","color","onClick","params","startDateFormatted","moment","format","endDateFormatted","allNamesArray","split","pushToDescriptives","forEach","e","push","defaultDescriptiveGeneration","nome","replace","customDescriptiveGeneration","disabled","map","index","Divider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eaebc538.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default {\r\n    box: {\r\n        marginTop: '80px',\r\n        display: 'flex',\r\n        flexDirection: 'column' as 'column',\r\n        alignItems: 'center'\r\n    },\r\n    boxTitle: {\r\n        marginBottom: '20px'\r\n    },\r\n    namesInputTitle: {\r\n        fontSize: '15px'\r\n    },\r\n    namesInput: {\r\n        marginTop: '20px'\r\n    },\r\n    checkboxTitle: {\r\n        fontSize: '15px'\r\n    },\r\n    dateInput: {\r\n        width: 140,\r\n        margin: '20px'\r\n    },\r\n    submit: {\r\n        margin: '25px',\r\n    },\r\n    customTitleInput: {\r\n        marginBottom: '20px'\r\n    },\r\n    listItem: {\r\n        margin: '20px'\r\n    }\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Typography, Container, Grid, FormControlLabel, Button, TextField, Checkbox, Divider } from '@material-ui/core';\r\nimport moment from 'moment';\r\n\r\n// Styles\r\nimport styles from './styles';\r\nimport GenerateDescriptives from './types';\r\n\r\nexport default function HomePage() {\r\n    const [names, setNames] = useState('');\r\n    const [isDefault, setIsDefault] = useState(true);\r\n    const [value, setValue] = useState(0);\r\n    const [startDate, setStartDate] = useState('2021-03-01');\r\n    const [endDate, setEndDate] = useState('2021-03-31');\r\n    const [allDescriptives, setAllDescriptives] = useState([{\r\n        title: '',\r\n        message: ''\r\n    }]);\r\n    const [customTitle, setCustomTitle] = useState('');\r\n    const [customText, setCustomText] = useState('');\r\n\r\n    function onSubmit() {\r\n        const startDateFormatted = moment(startDate, 'YYYY-MM-DD').format('DD/MM/YYYY');\r\n        const endDateFormatted = moment(endDate, 'YYYY-MM-DD').format('DD/MM/YYYY');\r\n        const allNames = names.split(';');\r\n\r\n        const params: GenerateDescriptives = {\r\n            startDateFormatted: startDateFormatted,\r\n            endDateFormatted: endDateFormatted,\r\n            allNamesArray: allNames,\r\n            value: value ?? 0\r\n        }\r\n\r\n        if (isDefault) {\r\n            defaultDescriptiveGeneration(params);\r\n            return;\r\n        }\r\n\r\n        customDescriptiveGeneration(params);\r\n    }\r\n\r\n    function defaultDescriptiveGeneration(params: GenerateDescriptives) {\r\n        const { allNamesArray, startDateFormatted, endDateFormatted, value } = params;\r\n        let pushToDescriptives = [{ title: '', message: '' }];\r\n        allNamesArray.forEach((e) => {\r\n            const title = `Descritivo ${e} - Ref. ao período de ${startDateFormatted} a ${endDateFormatted}`;\r\n            const message = `Boa tarde, ${e}!\r\n                 Segue em anexo o descritivo referente ao período de ${startDateFormatted} a ${endDateFormatted}. \r\n                 Valor: R$ ${value}\r\n                 \r\n                 Estando de acordo, por gentileza, enviar a nota fiscal para pagamento no e-mail: financeiro@kuadro.com.br. \r\n                 \r\n                 Att., \r\n                 \r\n                 Marina Ribeiro`;\r\n            pushToDescriptives.push({ title, message });\r\n        });\r\n\r\n        setAllDescriptives(pushToDescriptives);\r\n    }\r\n\r\n    function customDescriptiveGeneration(params: GenerateDescriptives) {\r\n        const { allNamesArray, startDateFormatted, endDateFormatted, value } = params;\r\n        let title = customTitle;\r\n        let message = customText;\r\n        let pushToDescriptives = [{ title: '', message: '' }];\r\n\r\n        allNamesArray.forEach((nome) => {\r\n            let title = customTitle;\r\n            let message = customText;\r\n\r\n            title = title.replace('${nome}', ` ${nome} `);\r\n            title = title.replace('${dataInicial}', ` ${startDateFormatted} `);\r\n            title = title.replace('${dataFinal}', ` ${endDateFormatted} `);\r\n            title = title.replace('${valor}', ` ${value} `);\r\n\r\n            message = message.replace('${nome}', ` ${nome} `);\r\n            message = message.replace('${dataInicial}', ` ${startDateFormatted} `);\r\n            message = message.replace('${dataFinal}', ` ${endDateFormatted} `);\r\n            message = message.replace('${valor}', ` ${value} `);\r\n\r\n            pushToDescriptives.push({ title, message });\r\n        });\r\n\r\n        setAllDescriptives(pushToDescriptives);\r\n    }\r\n\r\n    function isFormValid() {\r\n        if (names === '' || startDate === '' || endDate === '') {\r\n            return false;\r\n        }\r\n\r\n        if (!isDefault && (customTitle === '' || customText === '')) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    const handleChangeYes = () => {\r\n        setIsDefault(true);\r\n    };\r\n\r\n    const handleChangeNo = () => {\r\n        setIsDefault(false);\r\n    };\r\n\r\n    const handleChangeNames = (event) => {\r\n        setNames(event.target.value);\r\n    }\r\n\r\n    const handleChangeValue = (event) => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    const handleChangeStartDate = (event) => {\r\n        setStartDate(event.target.value);\r\n    }\r\n\r\n    const handleChangeEndDate = (event) => {\r\n        setEndDate(event.target.value);\r\n    }\r\n\r\n    const handleChangeCustomTitle = (event) => {\r\n        setCustomTitle(event.target.value);\r\n    }\r\n\r\n    const handleChangeCustomText = (event) => {\r\n        setCustomText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div style={styles.box as React.CSSProperties}>\r\n                <Typography component=\"h1\" variant=\"h5\" style={styles.boxTitle}>\r\n                    Geração automática de Descritivos\r\n                </Typography>\r\n                <Grid container spacing={2} >\r\n                    <Grid item xs={12}>\r\n                        <Typography component=\"h5\" variant=\"h5\" style={styles.checkboxTitle}>\r\n                            Insira os nomes separados por ponto e vírgula (;)\r\n                        </Typography>\r\n                        <TextField\r\n                            autoComplete=\"fname\"\r\n                            name=\"firstName\"\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"firstName\"\r\n                            label=\"Nomes\"\r\n                            autoFocus\r\n                            placeholder=\"exemplo; exemplo2; exemplo3\"\r\n                            style={styles.namesInput}\r\n                            onChange={handleChangeNames}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            autoComplete=\"valor\"\r\n                            type=\"number\"\r\n                            name=\"valor\"\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"Valor\"\r\n                            label=\"Valor\"\r\n                            placeholder=\"R$ 99,90\"\r\n                            style={styles.namesInput}\r\n                            onChange={handleChangeValue}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography component=\"h5\" variant=\"h5\" style={styles.checkboxTitle}>\r\n                            Selecione o período do descritivo\r\n                        </Typography>\r\n                        <TextField\r\n                            id=\"startDate\"\r\n                            label=\"Início\"\r\n                            type=\"date\"\r\n                            defaultValue={startDate}\r\n                            style={styles.dateInput}\r\n                            onChange={handleChangeStartDate}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            id=\"endDate\"\r\n                            label=\"Fim\"\r\n                            type=\"date\"\r\n                            defaultValue={endDate}\r\n                            style={styles.dateInput}\r\n                            onChange={handleChangeEndDate}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography component=\"h5\" variant=\"h5\" style={styles.checkboxTitle}>\r\n                            Descritivo padrão?\r\n                        </Typography>\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={isDefault} onChange={handleChangeYes} name=\"Sim\" />}\r\n                            label=\"Sim\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={!isDefault} onChange={handleChangeNo} name=\"Não\" />}\r\n                            label=\"Não\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    {!isDefault ? (\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                autoComplete=\"fname\"\r\n                                name=\"firstName\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"firstName\"\r\n                                label=\"Título\"\r\n                                autoFocus\r\n                                placeholder=\"Use ${nome} para posicionar o nome, ${valor} para o valor, ${dataInicial} e ${dataFinal} para posicionar as datas\"\r\n                                style={styles.customTitleInput}\r\n                                onChange={handleChangeCustomTitle}\r\n                            />\r\n                            <TextField\r\n                                autoComplete=\"fname\"\r\n                                name=\"firstName\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                multiline\r\n                                rows={8}\r\n                                id=\"firstName\"\r\n                                label=\"Texto do descritivo\"\r\n                                placeholder={'Use ${nome} para posicionar os nomes, ${valor} para o valor, ${dataInicial} e ${dataFinal} para posicionar as datas.'}\r\n                                autoFocus\r\n                                onChange={handleChangeCustomText}\r\n                            />\r\n                        </Grid>\r\n                    ) : null}\r\n\r\n                    <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={onSubmit}\r\n                        style={styles.submit}\r\n                        disabled={!isFormValid()}\r\n                    >\r\n                        Gerar Descritivos\r\n                    </Button>\r\n\r\n                    {allDescriptives.map((item, index) => {\r\n                        if (item.title !== '') {\r\n                            return (\r\n                                <Grid item xs={12}>\r\n                                    <Typography style={styles.listItem}>\r\n                                        {item.title}\r\n                                    </Typography>\r\n                                    <Typography style={styles.listItem}>\r\n                                        {item.message}\r\n                                    </Typography>\r\n                                    <Divider />\r\n                                </Grid>)\r\n                        }\r\n\r\n                        return null;\r\n                    })}\r\n\r\n                </Grid>\r\n            </div>\r\n        </Container>\r\n    );\r\n}","import './App.css';\n\nimport HomePage from './pages/Home';\n\nfunction App() {\n  return (\n    <HomePage />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}