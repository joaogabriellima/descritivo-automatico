{"version":3,"sources":["pages/Home/styles.ts","pages/Home/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["box","marginTop","display","flexDirection","alignItems","boxTitle","marginBottom","namesInputTitle","fontSize","namesInput","checkboxTitle","dateInput","width","margin","submit","listItem","HomePage","useState","names","setNames","isDefault","setIsDefault","startDate","setStartDate","endDate","setEndDate","allDescriptives","setAllDescriptives","Container","component","maxWidth","style","styles","Typography","variant","Grid","container","spacing","item","xs","TextField","autoComplete","name","required","fullWidth","id","label","autoFocus","placeholder","onChange","event","target","value","type","defaultValue","InputLabelProps","shrink","FormControlLabel","control","Checkbox","checked","multiline","rows","Button","color","onClick","startDateFormatted","moment","format","endDateFormatted","allNames","split","pushToDescriptives","forEach","e","descriptiveDefaultText","push","disabled","map","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e331389.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default {\r\n    box: {\r\n        marginTop: '80px',\r\n        display: 'flex',\r\n        flexDirection: 'column' as 'column',\r\n        alignItems: 'center'\r\n    },\r\n    boxTitle: {\r\n        marginBottom: '20px'\r\n    },\r\n    namesInputTitle: {\r\n        fontSize: '15px'\r\n    },\r\n    namesInput: {\r\n        marginTop: '20px'\r\n    },\r\n    checkboxTitle: {\r\n        fontSize: '15px'\r\n    },\r\n    dateInput: {\r\n        width: 140,\r\n        margin: '20px'\r\n    },\r\n    submit: {\r\n        margin: '25px',\r\n    },\r\n    listItem: {\r\n        margin: '20px'\r\n    }\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Typography, Container, Grid, FormControlLabel, Button, TextField, Checkbox } from '@material-ui/core';\r\nimport moment from 'moment';\r\n\r\n// Styles\r\nimport styles from './styles';\r\n\r\nfunction DescriptiveList() {\r\n\r\n}\r\n\r\nexport default function HomePage() {\r\n    const [names, setNames] = useState('');\r\n    const [isDefault, setIsDefault] = useState(true);\r\n    const [startDate, setStartDate] = useState('2021-03-01');\r\n    const [endDate, setEndDate] = useState('2021-03-31');\r\n    const [allDescriptives, setAllDescriptives] = useState<string[]>([]);\r\n\r\n    function OnSubmit() {\r\n        const startDateFormatted = moment(startDate, 'YYYY-MM-DD').format('DD/MM/YYYY');\r\n        const endDateFormatted = moment(endDate, 'YYYY-MM-DD').format('DD/MM/YYYY');\r\n\r\n        if (isDefault) {\r\n            let allNames = names.split(';');\r\n            let pushToDescriptives: string[] = [];\r\n            allNames.forEach((e) => {\r\n                const descriptiveDefaultText = `Boa tarde, ${e}! Segue anexo o descritivo referente ao período de ${startDateFormatted} a ${endDateFormatted}. Estando de acordo, por gentileza, enviar a nota fiscal para pagamento no e-mail: financeiro@kuadro.com.br. Atte., Marina Ribeiro`;\r\n                pushToDescriptives.push(descriptiveDefaultText);\r\n            });\r\n\r\n            setAllDescriptives(pushToDescriptives);\r\n            return;\r\n        }\r\n    }\r\n\r\n    function isFormValid() {\r\n        if (names === '' || startDate === '' || endDate === '') {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    const handleChangeYes = () => {\r\n        setIsDefault(true);\r\n    };\r\n\r\n    const handleChangeNo = () => {\r\n        setIsDefault(false);\r\n    };\r\n\r\n    const handleChangeNames = (event) => {\r\n        setNames(event.target.value);\r\n    }\r\n\r\n    const handleChangeStartDate = (event) => {\r\n        setStartDate(event.target.value);\r\n    }\r\n\r\n    const handleChangeEndDate = (event) => {\r\n        setEndDate(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div style={styles.box as React.CSSProperties}>\r\n                <Typography component=\"h1\" variant=\"h5\" style={styles.boxTitle}>\r\n                    Geração automática de Descritivos\r\n                </Typography>\r\n                <Grid container spacing={2} >\r\n                    <Grid item xs={12}>\r\n                        <Typography component=\"h5\" variant=\"h5\" style={styles.checkboxTitle}>\r\n                            Insira os nomes separados por ponto e vírgula (;)\r\n                        </Typography>\r\n                        <TextField\r\n                            autoComplete=\"fname\"\r\n                            name=\"firstName\"\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"firstName\"\r\n                            label=\"Nomes\"\r\n                            autoFocus\r\n                            placeholder=\"exemplo; exemplo2; exemplo3\"\r\n                            style={styles.namesInput}\r\n                            onChange={handleChangeNames}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography component=\"h5\" variant=\"h5\" style={styles.checkboxTitle}>\r\n                            Selecione o período do descritivo\r\n                        </Typography>\r\n                        <TextField\r\n                            id=\"startDate\"\r\n                            label=\"Início\"\r\n                            type=\"date\"\r\n                            defaultValue={startDate}\r\n                            style={styles.dateInput}\r\n                            onChange={handleChangeStartDate}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            id=\"endDate\"\r\n                            label=\"Fim\"\r\n                            type=\"date\"\r\n                            defaultValue={endDate}\r\n                            style={styles.dateInput}\r\n                            onChange={handleChangeEndDate}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography component=\"h5\" variant=\"h5\" style={styles.checkboxTitle}>\r\n                            Descritivo padrão?\r\n                        </Typography>\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={isDefault} onChange={handleChangeYes} name=\"Sim\" />}\r\n                            label=\"Sim\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={!isDefault} onChange={handleChangeNo} name=\"Não\" />}\r\n                            label=\"Não\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    {!isDefault ? (\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                autoComplete=\"fname\"\r\n                                name=\"firstName\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                multiline\r\n                                rows={8}\r\n                                id=\"firstName\"\r\n                                label=\"Texto do descritivo\"\r\n                                autoFocus\r\n                            />\r\n                        </Grid>\r\n                    ) : null}\r\n\r\n                    <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={OnSubmit}\r\n                        style={styles.submit}\r\n                        disabled={!isFormValid()}\r\n                    >\r\n                        Gerar Descritivos\r\n                    </Button>\r\n\r\n                    {allDescriptives.map((item, index) => {\r\n                        return (\r\n                            <Grid item xs={12}>\r\n                                <Typography component=\"h5\" variant=\"h5\" style={styles.listItem}>\r\n                                    {item}\r\n                                </Typography>\r\n                            </Grid>)\r\n                    })}\r\n\r\n                </Grid>\r\n            </div>\r\n        </Container>\r\n    );\r\n}","import './App.css';\n\nimport HomePage from './pages/Home';\n\nfunction App() {\n  return (\n    <HomePage />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}